# Neural Network to predict double of number
# Instead of getting input from user you can initialize list of multiples input
# Getting input from user

print("Neural Network to predict double of number")
inputs = input("Enter a numbers separated by space: ")
t = 2

# Str string to Int list
li = []
temp = inputs.split(" ")
for i in temp:
    a = int(i)
    li.append(a)


def split_data(li):
    length = len(li)
    part = abs(length/2)
    training_data = []
    testing_data = []
    count = 0
    for i in li:
        if count < part:
            training_data.append(i)
        else:
            testing_data.append(i)
        count += 1

    return training_data, testing_data
    # print("Training Data: ", training_data)
    # print("Testing Data: ", testing_data)
    # print("Sample Data: ", sample_data)


def correct_ans(li):
    return t*li

def accuracyfun(a, b):
    return (a/b)*100

def append_all_weight(weight):
    weight_list = []
    weight_list.append(weight)
    lenght_of_weight_list = len(weight_list)
    avg = (sum(weight_list))/lenght_of_weight_list
    return avg

# Neural Network for training
def train_neural_network(ip):
    weight = 5
    for j in range(1000):
        print("##Training## :: ", "Epoch=", j, ", for input=", ip)
        #print("Input: ", ip, ", Weight: ", weight, ", cost: ", cost)
        pred_ans = ip * weight
        cost = corr_ans - pred_ans
        weight = weight + 0.1*cost
    return pred_ans, weight

# Testing answers with training data using weight generated by neural network
def test_answers(ip):
    file = open("Weight.txt", "r")
    weight = file.read()
    weight = float(weight)
    for j in range(1000):
        test_ans = ip * weight
    return test_ans

training_data, testing_data = split_data(li)

# Train
for i in training_data:
    corr_ans = correct_ans(i)
    pred_ans, weight = train_neural_network(i)
    accr = accuracyfun(corr_ans, pred_ans)
    print("Accuracy after training data =", i, "is =", accr)

    avg = append_all_weight(weight)

    file = open("Average Weight.txt", "w")
    avg = str(avg)
    file.write(avg)
    file.close()

# Separation between training and testing
for i in range(4):
    print("#####Training End#####")

# Using Testing Data to check accuracy
for i in testing_data:
    corr_ans = correct_ans(i)
    test_ans = test_answers(i)
    accr = accuracyfun(corr_ans, test_ans)
    print("##Training## :: ", "For input=", i, "| Correct Ans=", corr_ans, "| Predicted Ans=", test_ans, "| Accuracy=", accr)

